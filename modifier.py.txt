import streamlit as st
import sqlite3

DB_PATH = "airworthiness.db"

# ========== FONCTIONS D'AJOUT ==========
def add_engine_change(engine_esn, change_type, out_esn, in_esn, performed_steps):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO engine_changes (engine_esn, change_type, out_esn, in_esn, performed_steps) VALUES (?, ?, ?, ?, ?)",
                  (engine_esn, change_type, out_esn, in_esn, performed_steps))
        conn.commit()

def add_shop_entry(engine_esn, status, comments):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO shop_entries (engine_esn, status, comments) VALUES (?, ?, ?)", (engine_esn, status, comments))
        conn.commit()

def add_spare_qty(engine_model, week_label, qty):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO spare_engines (engine_model, week_label, spare_qty) VALUES (?, ?, ?)", (engine_model, week_label, qty))
        conn.commit()

def add_lease_qty(engine_model, week_label, qty):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO lease_engines (engine_model, week_label, lease_qty) VALUES (?, ?, ?)", (engine_model, week_label, qty))
        conn.commit()

def add_on_watch(engine_esn, reason):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO on_watch (engine_esn, reason) VALUES (?, ?)", (engine_esn, reason))
        conn.commit()

def add_condition(engine_esn, category, description, due_date):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO condition_monitoring (engine_esn, category, description, due_date) VALUES (?, ?, ?, ?)",
                  (engine_esn, category, description, due_date))
        conn.commit()

def add_contract_task(engine_model, task_type, description, status):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO contracts_tasks (engine_model, type, description, status) VALUES (?, ?, ?, ?)",
                  (engine_model, task_type, description, status))
        conn.commit()

# ========== INTERFACE STREAMLIT ==========
st.title("‚úèÔ∏è Modifier ou compl√©ter un moteur")

with sqlite3.connect(DB_PATH) as conn:
    c = conn.cursor()
    c.execute("SELECT esn, model FROM engine_unit")
    moteurs = c.fetchall()

selected_esn = st.selectbox("Choisir un moteur (ESN)", [m[0] for m in moteurs])
selected_model = next((m[1] for m in moteurs if m[0] == selected_esn), None)

# 1. Engine Changes
with st.expander("1. üîÑ Engine Changes"):
    ch_type = st.selectbox("Type de changement", ["past", "upcoming"])
    out_esn = st.text_input("ESN OUT")
    in_esn = st.text_input("ESN IN")
    steps = st.text_area("√âtapes effectu√©es")
    if st.button("Ajouter ce changement"):
        add_engine_change(selected_esn, ch_type, out_esn, in_esn, steps)
        st.success("‚úÖ Changement ajout√©")

# 2. Shop Entries
with st.expander("2. üè≠ Entr√©e en Shop"):
    shop_status = st.text_input("Statut en shop")
    shop_comments = st.text_area("Commentaires")
    if st.button("Ajouter en shop"):
        add_shop_entry(selected_esn, shop_status, shop_comments)
        st.success("‚úÖ Entr√©e shop ajout√©e")

# 3. Spare Engines
with st.expander("3. üì¶ Spare Engines"):
    week_s = st.selectbox("Semaine", ["S", "S+1", "S+2", "S+3", "S+4"])
    qty_s = st.number_input("Quantit√© spare", 0)
    if st.button("Ajouter stock spare"):
        add_spare_qty(selected_model, week_s, qty_s)
        st.success("‚úÖ Spare stock ajout√©")

# 4. Lease Engines
with st.expander("4. ü§ù Lease Engines"):
    week_l = st.selectbox("Semaine (lease)", ["S", "S+1", "S+2", "S+3", "S+4"])
    qty_l = st.number_input("Quantit√© lou√©e", 0)
    if st.button("Ajouter lease"):
        add_lease_qty(selected_model, week_l, qty_l)
        st.success("‚úÖ Lease ajout√©")

# 5. On Watch
with st.expander("5. üëÅÔ∏è Moteurs √† surveiller"):
    reason = st.text_input("Raison du suivi (ex: Reduced BSI)")
    if st.button("Ajouter √† On Watch"):
        add_on_watch(selected_esn, reason)
        st.success("‚úÖ Moteur ajout√© √† la liste On Watch")

# 6. Condition Monitoring
with st.expander("6. ‚öôÔ∏è Suivi conditionnel"):
    cat = st.selectbox("Cat√©gorie", ["CNR", "Upcoming CNR", "Upcoming BSI", "Fault"])
    desc = st.text_input("Description")
    due = st.date_input("Date limite")
    if st.button("Ajouter suivi"):
        add_condition(selected_esn, cat, desc, due.strftime("%Y-%m-%d"))
        st.success("‚úÖ Condition enregistr√©e")

# 7. Contrats & AO
with st.expander("7. üìÑ Contrats et AO"):
    task_type = st.selectbox("Type", ["Contrat", "AO", "Autre"])
    desc = st.text_input("Description t√¢che/contrat")
    task_status = st.text_input("Statut")
    if st.button("Ajouter t√¢che/contrat"):
        add_contract_task(selected_model, task_type, desc, task_status)
        st.success("‚úÖ T√¢che enregistr√©e")
